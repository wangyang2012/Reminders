// https://openclassrooms.com/courses/structurez-vos-donnees-avec-xml/dom-exemple-d-utilisation-en-java
// https://www.mkyong.com/java/how-to-read-xml-file-in-java-dom-parser/
package com.mkyong.seo;

import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;
import java.io.File;

public class ReadXMLFile {

  public static void main(String argv[]) {

    try {

	File fXmlFile = new File("/Users/mkyong/staff.xml");
	DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
	DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
	Document doc = dBuilder.parse(fXmlFile);

	//optional, but recommended
	//read this - http://stackoverflow.com/questions/13786607/normalization-in-dom-parsing-with-java-how-does-it-work
	doc.getDocumentElement().normalize();

	System.out.println("Root element :" + doc.getDocumentElement().getNodeName());

	NodeList nList = doc.getElementsByTagName("staff");

	System.out.println("----------------------------");

	for (int temp = 0; temp < nList.getLength(); temp++) {

		Node nNode = nList.item(temp);

		System.out.println("\nCurrent Element :" + nNode.getNodeName());

		if (nNode.getNodeType() == Node.ELEMENT_NODE) {

			Element eElement = (Element) nNode;

			System.out.println("Staff id : " + eElement.getAttribute("id"));
			System.out.println("First Name : " + eElement.getElementsByTagName("firstname").item(0).getTextContent());
			System.out.println("Last Name : " + eElement.getElementsByTagName("lastname").item(0).getTextContent());
			System.out.println("Nick Name : " + eElement.getElementsByTagName("nickname").item(0).getTextContent());
			System.out.println("Salary : " + eElement.getElementsByTagName("salary").item(0).getTextContent());

		}
	}
    } catch (Exception e) {
	e.printStackTrace();
    }
  }

}





    // Read the XML file to get nbPages
    private int getNbPagesFromXml() {
        File xmlFile = getXmlFile();
        if (xmlFile == null) {
            return 0;
        }

        final DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        try {
            final DocumentBuilder builder = factory.newDocumentBuilder();
            final Document document= builder.parse(xmlFile);
            final Element racine = document.getDocumentElement(); // Elément <INA>
            final NodeList boites = racine.getChildNodes(); // Eléments <BOITE>
            for (int i = 0; i < boites.getLength(); i++) {
                Node boite = boites.item(i);
                if (boite.getNodeType() == Node.ELEMENT_NODE) {
                    Element eBoite = (Element) boite;
                    if (numBoite.equals(eBoite.getAttribute("numboite"))){
                        NodeList dossiers = boite.getChildNodes();
                        for (int j = 0; j < dossiers.getLength(); j++) {
                            Node nNode = dossiers.item(j);
                            if (nNode.getNodeType() == Node.ELEMENT_NODE) {
                                Element dossier = (Element) nNode;
                                String numDos = dossier.getAttribute("numdossier");
                                if (numDossier.equals(numDos)) {
                                    String nbPages = dossier.getAttribute("nbpages");
                                    return Integer.valueOf(nbPages);
                                }
                            }
                        }
                    }
                }
            }
        } catch (ParserConfigurationException e) {
            e.printStackTrace();
        } catch (SAXException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (NumberFormatException e) {
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return 0;
    }
