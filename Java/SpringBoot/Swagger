/****************** V3 **************************/
1. Add dependence in pom.xml
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-ui</artifactId>
            <version>1.5.2</version>
        </dependency>

It works already!
http://localhost:8080/swagger-ui.html

2. Add SwaggerConfig.java
@Configuration
public class SwaggerConfig {
    @Bean
    public OpenAPI customOpenAPI(@Value("${application.name}") String appName, @Value("${application.description}") String appDesciption, @Value("${application.version}") String appVersion) {
        return new OpenAPI()
                .info(new Info()
                        .title(appName)
                        .version(appVersion)
                        .description(appDesciption));
    }
}

Add this line in application.properties:
springdoc.default-produces-media-type=application/json

3. Get project information from pom.xml in application.properties / application.yml
application:
  name: @project.name@
  version: @project.version@
  description: @project.description@
  
4. Add project information in pom.xml
<project>
    <version>1.0.5-SNAPSHOT</version>
    <name>My project name</name>
    <description>REST API</description>
</project>

Tutorial:
https://dzone.com/articles/openapi-3-documentation-with-spring-boot

Migration from Swagger v2 to V3
https://springdoc.org/migrating-from-springfox.html


/****************** V2 **************************/
1. Add dependence in pom.xml

<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger2</artifactId>
    <version>${springfox.version}</version>
    <exclusions>
        <exclusion>
            <artifactId>mapstruct</artifactId>
            <groupId>org.mapstruct</groupId>
        </exclusion>
    </exclusions>
</dependency>
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-swagger-ui</artifactId>
    <version>2.7.0</version>
</dependency>


2. Add SwaggerConfiguration.java


package fr.ina.research.otmedia.streams.config;

import com.fasterxml.classmate.TypeResolver;
import com.google.common.collect.Sets;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.http.ResponseEntity;
import org.springframework.util.StopWatch;
import springfox.documentation.service.ApiInfo;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

import java.util.Date;

import static springfox.documentation.builders.PathSelectors.regex;

@Configuration
@EnableSwagger2
public class SwaggerConfiguration {

    public static final String DEFAULT_INCLUDE_PATTERN = "/api/.*";

    private final Logger log = LoggerFactory.getLogger(SwaggerConfiguration.class);

    @Autowired
    private TypeResolver typeResolver;

    @Bean
    public Docket api(@Autowired AppProperties appProperties) {
        log.debug("Starting Swagger");
        StopWatch watch = new StopWatch();
        watch.start();
        ApiInfo apiInfo = new ApiInfo(
                appProperties.getSwagger().getTitle(),
                appProperties.getSwagger().getDescription(),
                appProperties.getSwagger().getVersion(),
                appProperties.getSwagger().getTermsOfServiceUrl(),
                appProperties.getSwagger().getContact(),
                appProperties.getSwagger().getLicense(),
                appProperties.getSwagger().getLicenseUrl());
        //http://www.baeldung.com/swagger-2-documentation-for-spring-rest-api
        Docket docket = new Docket(DocumentationType.SWAGGER_2)
                .apiInfo(apiInfo)
                .forCodeGeneration(true)
                .genericModelSubstitutes(ResponseEntity.class)
                .ignoredParameterTypes(
                        Pageable.class, // Ignore pageable parameters
                        java.sql.Date.class,
                        Sort.class,
                        AppProperties.Swagger.class
                )
                .directModelSubstitute(java.time.LocalDate.class, java.sql.Date.class)
                .directModelSubstitute(java.time.ZonedDateTime.class, Date.class)
                .directModelSubstitute(java.time.LocalDateTime.class, Date.class)
                .select()
                .paths(regex(DEFAULT_INCLUDE_PATTERN))
                .build()
                .protocols(Sets.newCopyOnWriteArraySet(appProperties.getSwagger().getProtocols()));
        watch.stop();
        log.debug("Started Swagger in {} ms", watch.getTotalTimeMillis());
        return docket;
    }


}


3. Configure Swagger properties in AppProperties.java (optional)


    public Swagger getSwagger() {
        return swagger;
    }

    public static class Swagger {
        private String title = "Applicatoin nama";

        private String description = "Application documentation";

        private String version = "0.0.1";

        private String termsOfServiceUrl;

        private String contact;

        private String license;

        private String licenseUrl;

        private List<String> protocols = new ArrayList<>();

        public String getTitle() {
            return title;
        }

        public void setTitle(String title) {
            this.title = title;
        }

        public String getDescription() {
            return description;
        }

        public void setDescription(String description) {
            this.description = description;
        }

        public String getVersion() {
            return version;
        }

        public void setVersion(String version) {
            this.version = version;
        }

        public String getTermsOfServiceUrl() {
            return termsOfServiceUrl;
        }

        public void setTermsOfServiceUrl(String termsOfServiceUrl) {
            this.termsOfServiceUrl = termsOfServiceUrl;
        }

        public String getContact() {
            return contact;
        }

        public void setContact(String contact) {
            this.contact = contact;
        }

        public String getLicense() {
            return license;
        }

        public void setLicense(String license) {
            this.license = license;
        }

        public String getLicenseUrl() {
            return licenseUrl;
        }

        public void setLicenseUrl(String licenseUrl) {
            this.licenseUrl = licenseUrl;
        }

        public List<String> getProtocols() {
            return protocols;
        }

        public void setProtocols(final List<String> protocols) {
            this.protocols = protocols;
        }
    }

4. Configure parameters of API (Optional)
@ApiImplicitParams({
            @ApiImplicitParam(name = "page", dataType = "string", paramType = "query",
                    value = "Results page you want to retrieve (1..N)"),
            @ApiImplicitParam(name = "size", dataType = "string", paramType = "query",
                    value = "Number of records per page."),
            @ApiImplicitParam(name = "sort", dataType = "string", paramType = "query",
                    value = "Sort object of Pageable, format: col1, col2, col3, direction")
    })//Mapping parameters to Pageable objects
    @RequestMapping(value = "/search", method = RequestMethod.POST, produces = {MediaType.APPLICATION_JSON_VALUE})
    public ResponseEntity<SearchResponseVM> search(@RequestBody FilterDTO filterDTO, @RequestParam(defaultValue = "true", required = false) Boolean savefilter, @RequestParam(defaultValue = "5", required = false) Number top, Pageable pageable, Authentication authentication) throws BusinessException {
        log.debug("REST request : Search documents by filter dto savefilter : {}", savefilter);
        SearchResponseVM searchResponseVM = documentService.search(filterDTO, savefilter, top, pageable, authentication);
        HttpHeaders headers = PaginationUtil.generatePaginationHttpHeaders(searchResponseVM, "/api/otm-users");
        return new ResponseEntity<>(searchResponseVM, headers, PaginationUtil.getStatusCodeWithPageable(searchResponseVM));
    }


5. Observe Swagger:

http://localhost:8080/v2/api-docs
http://localhost:8080/swagger-ui.html


6. Introduce to Angular

6.1 Add dependence in package.json

"api-update": "java -jar tools/swagger-codegen-cli-2.2.3.jar generate -l typescript-angular2 -i http://localhost:8080/v2/api-docs -o src/app/components/streams-admin/core",

6.2 Launch Api-update

yarn api-update
